varnishtest "Layering test"

feature cmd "getent hosts localhost"

server s1 {
       rxreq
       txresp
       rxreq
       txresp
       rxreq
       txresp
} -start

varnish v1 -vcl {backend none none;} -start

shell {
	cat >${tmpdir}/layer.vcl <<-EOF
	vcl 4.1;
	import dynamic;
	import directors;
	import std;

	backend s1 {
		.host = "localhost";
		.port = "${s1_port}";
	}

	sub vcl_init {
		new d1 = dynamic.director(
		    domain_usage_timeout = 0.1s,
		    port = "${s1_port}");
		d1.debug(true);
		new rr = directors.round_robin();
		rr.add_backend(d1.backend("localhost"));
		std.log("Resolve: " + rr.backend().resolve());
	}

	sub vcl_recv {
		std.log("Resolve: " + rr.backend().resolve());
		set req.backend_hint = rr.backend();
		return (pass);
	}

	sub vcl_backend_error {
		# the director may resolve ::1 first
		return (retry);
	}
	EOF
}

logexpect l1 -v v1 -d 1 -g raw {
	expect *    0 VCL_Log "Resolve: d1"
} -start

logexpect l2 -v v1 -q "vxid == 1001" {
	expect * 1001 VCL_Log "Resolve: d1"
} -start

varnish v1 -cliok "vcl.load vclX1 ${tmpdir}/layer.vcl"
varnish v1 -cliok "vcl.use vclX1"
varnish v1 -cliok "vcl.discard vcl1"

varnish v1 -cliok "backend.list"

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	delay 0.2
	txreq
	rxresp
	expect resp.status == 200
	delay 0.2
	txreq
	rxresp
	expect resp.status == 200
} -run

varnish v1 -expect VBE.vclX1.d1(${s1_addr}:${s1_port}).req == 3
varnish v1 -expect LCK.dynamic.director.creat > 0
varnish v1 -expect LCK.dynamic.backend.creat > 0

logexpect l1 -wait
logexpect l2 -wait

# load as cold and discard
varnish v1 -cliok "vcl.load vclX2 ${tmpdir}/layer.vcl cold"
varnish v1 -cliok "vcl.discard vclX2"

varnish v1 -vcl { backend none none; }
varnish v1 -cliok "vcl.discard vclX1"
varnish v1 -vsl_catchup
