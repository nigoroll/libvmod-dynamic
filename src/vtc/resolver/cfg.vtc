varnishtest "dynamic.resolver configuration"

varnish v1 -vcl {
	import dynamic;

	backend proforma none;

	sub vcl_init {
		new r1 = dynamic.resolver();

		r1.set_resolution_type(RECURSING);
		r1.set_resolution_type(STUB);

		# ---

		r1.add_namespace(DNS);
		r1.add_namespace(LOCALNAMES);
		## not implemented
		# r1.add_namespace(NETBIOS);
		# r1.add_namespace(MDNS);
		# r1.add_namespace(NIS);
		r1.set_namespaces();

		r1.clear_namespaces();
		r1.add_namespace(DNS);
		r1.set_namespaces();

		# ---

		r1.add_transport(UDP);
		r1.add_transport(TCP);
		## may not be implemented
		# r1.add_transport(TLS);
		r1.set_transports();

		r1.clear_transports();
		r1.add_transport(UDP);
		r1.set_transports();

		# ---

		r1.set_idle_timeout(10m);
		r1.set_limit_outstanding_queries(1024);
		r1.set_timeout(10s);

		# ---

		r1.set_follow_redirects(REDIRECTS_FOLLOW);
		r1.set_follow_redirects(REDIRECTS_DO_NOT_FOLLOW);

		# docs example
		new r = dynamic.resolver();
		new d = dynamic.director(
			resolver = r.use(),
			ttl_from = dns
			);

	}

	sub vcl_recv {
		r1.set_resolution_type(RECURSING);
	}
} -start

logexpect l1 -v v1 -g raw {
	expect * * VCL_Error "xresolver.set_resolution_type may only be called from vcl_init"
} -start

client c1 {
	txreq
	rxresp
	expect resp.status == 503
} -run

logexpect l1 -wait

varnish v1 -errvcl "tried to add namespace DNS twice" {
	import dynamic;

	backend proforma none;

	sub vcl_init {
		new r1 = dynamic.resolver();
		r1.add_namespace(DNS);
		r1.add_namespace(LOCALNAMES);
		r1.add_namespace(DNS);
	}
}

varnish v1 -errvcl "tried to add transport UDP twice" {
	import dynamic;

	backend proforma none;

	sub vcl_init {
		new r1 = dynamic.resolver();
		r1.add_transport(UDP);
		r1.add_transport(TCP);
		r1.add_transport(UDP);
	}
}

varnish v1 -errvcl "error 311 (A required parameter had an invalid value.)" {
	import dynamic;

	backend proforma none;

	sub vcl_init {
		new r1 = dynamic.resolver();
		r1.set_limit_outstanding_queries(1024*1024);
	}
}
