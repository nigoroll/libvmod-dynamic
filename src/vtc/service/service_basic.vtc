varnishtest "service smoke test"

feature cmd {dig @b.root-servers.net. a.root-servers.net. >/dev/null}

varnish v1 -vcl {
	import dynamic;

	backend proforma none;

	sub vcl_init {
		new r1 = dynamic.resolver();
		new d1 = dynamic.director(
		    resolver = r1.use());
		d1.debug(true);
	}

	sub vcl_recv {
		set req.backend_hint =
		    d1.service("_test._tcp.vmod-dynamic.uplex.de");
		set req.http.Host = "varnish-cache.org";
	}

	sub vcl_backend_fetch {
		set bereq.first_byte_timeout = 1s;
		set bereq.connect_timeout = 1s;
	}

	sub vcl_backend_response {
		set beresp.http.backend = beresp.backend;
	}

	sub vcl_backend_error {
		set beresp.http.backend = beresp.backend;
	}
} -start

# vcl1 d1 _test._tcp.vmod-dynamic.uplex.de -> one.test.uplex.de.:80 priority 1 weight 10 ttl 3600
# vcl1 d1 _test._tcp.vmod-dynamic.uplex.de -> two-a.test.uplex.de.:81 priority 2 weight 25 ttl 3600
# vcl1 d1 _test._tcp.vmod-dynamic.uplex.de -> two-b.test.uplex.de.:82 priority 2 weight 50 ttl 3600

varnish v1 -cli "backend.list"

# we do not care about failing backend requests here, we only care
# about the right backend being used

# all healthy (no probe): priority 1 is being used
client c1 {
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:80)
} -run

# priority 1 sick: priority 2 is being used
# test random choice by weight: 1/3 two-a:81 / 2/3 two-b:82
# the order is deterministic due to VTC using the testeable rng
# $ grep -E ' c2 +[0-9.]+ +http.*backend' service/basic.log \
#   | sed 's:^.*backend\: ::' | sort | uniq -c
#       6 d1(212.12.63.113:81)
#      14 d1(212.12.63.113:82)

varnish v1 -cliok "backend.set_health *.d1(212.12.63.113:80) sick"
varnish v1 -cliok "debug.srandom"

client c2 {
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:81)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:81)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:81)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:81)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
} -run

varnish v1 -cliok "backend.set_health *.d1(212.12.63.113:81) sick"

client c2 -repeat 5 -keepalive {
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:82)
}

varnish v1 -cliok "backend.set_health *.d1(212.12.63.113:80) healthy"
client c2 {
	txreq
	rxresp
	expect resp.http.backend == d1(212.12.63.113:80)
} -run
